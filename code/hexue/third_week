1.编写一个名为favorite_book()的函数，其中包含一个名为title的形参，这个函数打印一条消息，如one of my favorite books is learn python。调用这个函数,并将一本图书的名字作为实参传递给该函数
def favorite_book(title1):
    print('One of my favorite books is '+str(title1.title()) + '.')
favorite_book('Python')
2.1编写一个名为describe_city的函数，它接受一座城市的名字以及该城市所属的国家。这个函数应打印一个简单的例子，如Beijing is in China
def describe_city(city,country):
    print(city + ' is in ' + country + '.')
describe_city('Beijing','China')
2.2给用于存储国家的形参指定默认值，对三个不同的城市调用这个函数，且其中至少有一座城市不属于默认国家
def describe_city(city,country='China'):
    print(city + ' is in ' + country +'.')
describe_city('Shanghai')
describe_city('Nanjing')
describe_city('Havaford','America')
3.创建一个包含魔术师名字的列表，并将其传递给一个名为show_magicians() 的函数，这个函数打印列表中每个魔术师的名字。
def show_magicians(name_list):
    for name in name_list:
        print(name)
name_list = ['Liuqian','Hexie','Tomas','Alburn']
show_magicians(name_list)
4.创建一个包含整数的列表，并将其传递给一个名为get_max()和get_min()的函数，输出函数返回的结果
def get_max(num_list):
    for max in num_list:
        print(max)
def get_min(num_list):
    for min in num_list:
        print(min)
num_list = [2,4,1,9,3,-1]
get_max(num_list)
get_min(num_list)
print('max is ' + str(max(num_list)))
print('min is ' + str(min(num_list)))
5.创建一个名为User的类，其中包含属性first_name和last_name,自定义其他属性，如年龄，电话等。定义一个名为describe_user()的方法，打印用户信息摘要。定义一个名为greet_user()的方法，它向用户发出个性化的问候，比如hello xxx 创建多个不同用户的实例，对每个实例分别调用上述两个方法
class User():
	"""docstring for User"""
	def __init__(self, first_name,last_name):
		self.first_name = first_name
		self.last_name = last_name

	def describe_name(self):
		print("fitst_name :",self.first_name," last_name: ",self.last_name)

	def greet_user(self):
		print("hello, ",self.first_name," ",self.last_name)

user1 = User('Alice','Tom')
user1.describe_name()
user1.greet_user()
user2 = User("Mary",'Bob')
user2.describe_name()
user2.greet_user()
user3 = User("Tony",'Belbert')
user3.describe_name()
user3.greet_user()
6.在上一题的基础上，添加一个名为login_attempts的属性，编写一个名为increment_login_attempts()的方法，它将属性login_attempts值加1，编写一个reset_login_attempts()的方法,它将属性login_attempts值重置为0
创建一个实例，调用上述方法，检查结果的正确性
class User():
	def __init__(self, first_name,last_name):
		self.first_name = first_name
		self.last_name = last_name
		self.login_attempts = 0

	def describe_name(self):
		print("fitst_name :",self.first_name," last_name: ",self.last_name)

	def greet_user(self):
		print("hello, ",self.first_name," ",self.last_name)

	def  increment_login_attempts(self):
		self.login_attempts += 1
	def reset_login_attempts(self):
		self.login_attempts = 0

user1 = User('Alice','Tom')
user1.describe_name()
print("login_attempts:",user1.login_attempts)
user1.increment_login_attempts()
print("login_attempts:",user1.login_attempts)
user1.increment_login_attempts()
print("login_attempts:",user1.login_attempts)
user1.reset_login_attempts()
print("login_attempts:",user1.login_attempts)
 7.管理员是特殊的用户，编写一个名为Admin的类，继承上一题的User类，添加一个privileges的属性，用于存储一个由字符串(如 can add post)组成的列表，编写一个show_privileges()的方法，显示管理员权限
创建实例并调用该方法
class User():
	"""docstring for User"""
	def __init__(self, first_name,last_name):
		self.first_name = first_name
		self.last_name = last_name
		self.login_attempts = 0

	def describe_name(self):
		print("fitst_name :",self.first_name," last_name: ",self.last_name)

	def greet_user(self):
		print("hello, ",self.first_name," ",self.last_name)

	def  increment_login_attempts(self):
		self.login_attempts += 1
	def reset_login_attempts(self):
		self.login_attempts = 0

class Admin(User):
	"""docstring for Admin"""
	def __init__(self, first_name,last_name):
		super().__init__(first_name,last_name)
		self.privileges = ['can add post','can ban user','can delete post']

	def show_privileges(self):
		print(self.privileges)

admin = Admin("Alice",'Bob')
admin.show_privileges()
